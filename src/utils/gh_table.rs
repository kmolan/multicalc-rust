pub const MAX_GH_ORDER: usize = 15;
use crate::utils::error_codes::ErrorCode;

pub fn get_gh_weights_and_abscissae(order: usize, index: usize) -> Result<(f64, f64), ErrorCode>
{
    let ref_abs: f64 = match order 
    {
        1 => HERMITE_ABSCISSA_1[index],
        2 => HERMITE_ABSCISSA_2[index],
        3 => HERMITE_ABSCISSA_3[index],
        4 => HERMITE_ABSCISSA_4[index],
        5 => HERMITE_ABSCISSA_5[index],
        6 => HERMITE_ABSCISSA_6[index],
        7 => HERMITE_ABSCISSA_7[index],
        8 => HERMITE_ABSCISSA_8[index],
        9 => HERMITE_ABSCISSA_9[index],
        10 => HERMITE_ABSCISSA_10[index],
        11 => HERMITE_ABSCISSA_11[index],
        12 => HERMITE_ABSCISSA_12[index],
        13 => HERMITE_ABSCISSA_13[index],
        14 => HERMITE_ABSCISSA_14[index],
        15 => HERMITE_ABSCISSA_15[index],
        _ => return Err(ErrorCode::GaussianQuadratureOrderOutOfRange),
    };

    let ref_weight: f64 = match order 
    {
        1 => HERMITE_WEIGHT_1[index],
        2 => HERMITE_WEIGHT_2[index],
        3 => HERMITE_WEIGHT_3[index],
        4 => HERMITE_WEIGHT_4[index],
        5 => HERMITE_WEIGHT_5[index],
        6 => HERMITE_WEIGHT_6[index],
        7 => HERMITE_WEIGHT_7[index],
        8 => HERMITE_WEIGHT_8[index],
        9 => HERMITE_WEIGHT_9[index],
        10 => HERMITE_WEIGHT_10[index],
        11 => HERMITE_WEIGHT_11[index],
        12 => HERMITE_WEIGHT_12[index],
        13 => HERMITE_WEIGHT_13[index],
        14 => HERMITE_WEIGHT_14[index],
        15 => HERMITE_WEIGHT_15[index],
        _ => return Err(ErrorCode::GaussianQuadratureOrderOutOfRange),
    };

    return Ok((ref_abs, ref_weight));
}

// =============================================================================
// Table generated using Python's numpy.polynomial.hermite
// =============================================================================
const HERMITE_ABSCISSA_1: [f64; 1] = [0.0];
const HERMITE_ABSCISSA_2: [f64; 2] = [-0.70710678, 0.70710678];
const HERMITE_ABSCISSA_3: [f64; 3] = [-1.22474487, 0.0, 1.22474487];
const HERMITE_ABSCISSA_4: [f64; 4] = [-1.65068012, -0.52464762,  0.52464762,  1.65068012];
const HERMITE_ABSCISSA_5: [f64; 5] = [-2.02018287, -0.95857246,  0.0,  0.95857246,  2.02018287];
const HERMITE_ABSCISSA_6: [f64; 6] = [-2.35060497, -1.33584907, -0.43607741,  0.43607741,  1.33584907, 2.35060497];
const HERMITE_ABSCISSA_7: [f64; 7] = [-2.65196136, -1.67355163, -0.81628788,  0.0,  0.81628788, 1.67355163,  2.65196136];
const HERMITE_ABSCISSA_8: [f64; 8] = [-2.93063742, -1.98165676, -1.15719371, -0.38118699,  0.38118699, 1.15719371,  1.98165676,  2.93063742];
const HERMITE_ABSCISSA_9: [f64; 9] = [-3.1909932, -2.26658058, -1.46855329, -0.72355102, 0.0, 0.72355102, 1.46855329, 2.26658058, 3.1909932];
const HERMITE_ABSCISSA_10: [f64; 10] = [-3.43615912, -2.53273167, -1.75668365, -1.03661083, -0.34290133, 0.34290133, 1.03661083, 1.75668365, 2.53273167, 3.43615912];
const HERMITE_ABSCISSA_11: [f64; 11] = [-3.66847085, -2.7832901 , -2.02594802, -1.32655708, -0.65680957, 0.0, 0.65680957, 1.32655708, 2.02594802, 2.7832901, 3.66847085];
const HERMITE_ABSCISSA_12: [f64; 12] = [-3.8897249 , -3.02063703, -2.27950708, -1.59768264, -0.94778839, -0.31424038, 0.31424038, 0.94778839, 1.59768264, 2.27950708, 3.02063703, 3.8897249 ];
const HERMITE_ABSCISSA_13: [f64; 13] = [-4.1013376 , -3.24660898, -2.51973569, -1.85310765, -1.22005504, -0.60576388, 0.0,  0.60576388, 1.22005504, 1.85310765, 2.51973569, 3.24660898, 4.1013376 ];
const HERMITE_ABSCISSA_14: [f64; 14] = [-4.30444857, -3.46265693, -2.74847072, -2.09518326, -1.47668273, -0.87871379, -0.29174551,  0.29174551,  0.87871379,  1.47668273, 2.09518326,  2.74847072,  3.46265693,  4.30444857];
const HERMITE_ABSCISSA_15: [f64; 15] = [-4.49999071, -3.66995037, -2.96716693, -2.32573249, -1.71999258, -1.13611559, -0.56506958, 0.0, 0.56506958, 1.13611559, 1.71999258, 2.32573249, 2.96716693, 3.66995037, 4.49999071];


const HERMITE_WEIGHT_1: [f64; 1] = [1.77245385];
const HERMITE_WEIGHT_2: [f64; 2] = [0.88622693, 0.88622693];
const HERMITE_WEIGHT_3: [f64; 3] = [0.29540898, 1.1816359, 0.29540898];
const HERMITE_WEIGHT_4: [f64; 4] = [0.08131284, 0.80491409, 0.80491409, 0.08131284];
const HERMITE_WEIGHT_5: [f64; 5] = [0.01995324, 0.39361932, 0.94530872, 0.39361932, 0.01995324];
const HERMITE_WEIGHT_6: [f64; 6] = [0.00453001, 0.15706732, 0.7246296, 0.7246296, 0.15706732, 0.00453001];
const HERMITE_WEIGHT_7: [f64; 7] = [0.00097178, 0.05451558, 0.42560725, 0.81026462, 0.42560725, 0.05451558, 0.00097178];
const HERMITE_WEIGHT_8: [f64; 8] = [1.99604072e-04, 1.70779830e-02, 2.07802326e-01, 6.61147013e-01, 6.61147013e-01, 2.07802326e-01, 1.70779830e-02, 1.99604072e-04];
const HERMITE_WEIGHT_9: [f64; 9] = [3.96069773e-05, 4.94362428e-03, 8.84745274e-02, 4.32651559e-01, 7.20235216e-01, 4.32651559e-01, 8.84745274e-02, 4.94362428e-03, 3.96069773e-05];
const HERMITE_WEIGHT_10: [f64; 10] = [7.64043286e-06, 1.34364575e-03, 3.38743945e-02, 2.40138611e-01, 6.10862634e-01, 6.10862634e-01, 2.40138611e-01, 3.38743945e-02, 1.34364575e-03, 7.64043286e-06];
const HERMITE_WEIGHT_11: [f64; 11] = [1.43956039e-06, 3.46819466e-04, 1.19113954e-02, 1.17227875e-01, 4.29359752e-01, 6.54759287e-01, 4.29359752e-01, 1.17227875e-01, 1.19113954e-02, 3.46819466e-04, 1.43956039e-06];
const HERMITE_WEIGHT_12: [f64; 12] = [2.65855168e-07, 8.57368704e-05, 3.90539058e-03, 5.16079856e-02, 2.60492310e-01, 5.70135236e-01, 5.70135236e-01, 2.60492310e-01, 5.16079856e-02, 3.90539058e-03, 8.57368704e-05, 2.65855168e-07];
const HERMITE_WEIGHT_13: [f64; 13] = [4.82573185e-08, 2.04303604e-05, 1.20745999e-03, 2.08627753e-02, 1.40323321e-01, 4.21616297e-01, 6.04393188e-01, 4.21616297e-01, 1.40323321e-01, 2.08627753e-02, 1.20745999e-03, 2.04303604e-05, 4.82573185e-08];
const HERMITE_WEIGHT_14: [f64; 14] = [8.62859117e-09, 4.71648436e-06, 3.55092614e-04, 7.85005473e-03, 6.85055342e-02, 2.73105609e-01, 5.36405910e-01, 5.36405910e-01, 2.73105609e-01, 6.85055342e-02, 7.85005473e-03, 3.55092614e-04, 4.71648436e-06, 8.62859117e-09];
const HERMITE_WEIGHT_15: [f64; 15] = [1.52247580e-09, 1.05911555e-06, 1.00004441e-04, 2.77806884e-03, 3.07800339e-02, 1.58488916e-01, 4.12028687e-01, 5.64100309e-01, 4.12028687e-01, 1.58488916e-01, 3.07800339e-02, 2.77806884e-03, 1.00004441e-04, 1.05911555e-06, 1.52247580e-09];